"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any

"""FastMCP run command implementation."""
logger = ...
def is_url(path: str) -> bool:
    """Check if a string is a URL."""
    ...

def parse_file_path(server_spec: str) -> tuple[Path, str | None]:
    """Parse a file path that may include a server object specification.

    Args:
        server_spec: Path to file, optionally with :object suffix

    Returns:
        Tuple of (file_path, server_object)
    """
    ...

def import_server(file: Path, server_object: str | None = ...) -> Any:
    """Import a MCP server from a file.

    Args:
        file: Path to the file
        server_object: Optional object name in format "module:object" or just "object"

    Returns:
        The server object
    """
    ...

def create_client_server(url: str) -> Any:
    """Create a FastMCP server from a client URL.

    Args:
        url: The URL to connect to

    Returns:
        A FastMCP server instance
    """
    ...

def import_server_with_args(file: Path, server_object: str | None = ..., server_args: list[str] | None = ...) -> Any:
    """Import a server with optional command line arguments.

    Args:
        file: Path to the server file
        server_object: Optional server object name
        server_args: Optional command line arguments to inject

    Returns:
        The imported server object
    """
    ...

def run_command(server_spec: str, transport: str | None = ..., host: str | None = ..., port: int | None = ..., log_level: str | None = ..., server_args: list[str] | None = ...) -> None:
    """Run a MCP server or connect to a remote one.

    Args:
        server_spec: Python file, object specification (file:obj), or URL
        transport: Transport protocol to use
        host: Host to bind to when using http transport
        port: Port to bind to when using http transport
        log_level: Log level
        server_args: Additional arguments to pass to the server
    """
    ...

