"""
This type stub file was generated by pyright.
"""

import typer
from pathlib import Path
from typing import Annotated
from typer import Context

"""FastMCP CLI tools."""
logger = ...
console = ...
app = ...
@app.command()
def version(ctx: Context): # -> None:
    ...

@app.command()
def dev(server_spec: str = ..., with_editable: Annotated[Path | None, typer.Option("--with-editable", "-e", help="Directory containing pyproject.toml to install in editable mode", exists=True, file_okay=False, resolve_path=True),] = ..., with_packages: Annotated[list[str], typer.Option("--with", help="Additional packages to install"),] = ..., inspector_version: Annotated[str | None, typer.Option("--inspector-version", help="Version of the MCP Inspector to use"),] = ..., ui_port: Annotated[int | None, typer.Option("--ui-port", help="Port for the MCP Inspector UI"),] = ..., server_port: Annotated[int | None, typer.Option("--server-port", help="Port for the MCP Inspector Proxy server"),] = ...) -> None:
    """Run a MCP server with the MCP Inspector."""
    ...

@app.command(context_settings={ "allow_extra_args": True })
def run(ctx: typer.Context, server_spec: str = ..., transport: Annotated[str | None, typer.Option("--transport", "-t", help="Transport protocol to use (stdio, http, or sse)"),] = ..., host: Annotated[str | None, typer.Option("--host", help="Host to bind to when using http transport (default: 127.0.0.1)"),] = ..., port: Annotated[int | None, typer.Option("--port", "-p", help="Port to bind to when using http transport (default: 8000)"),] = ..., log_level: Annotated[str | None, typer.Option("--log-level", "-l", help="Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)"),] = ...) -> None:
    """Run a MCP server or connect to a remote one.

    The server can be specified in three ways:
    1. Module approach: server.py - runs the module directly, looking for an object named mcp/server/app.\n
    2. Import approach: server.py:app - imports and runs the specified server object.\n
    3. URL approach: http://server-url - connects to a remote server and creates a proxy.\n\n

    Note: This command runs the server directly. You are responsible for ensuring
    all dependencies are available.

    Server arguments can be passed after -- :
    fastmcp run server.py -- --config config.json --debug
    """
    ...

@app.command()
def install(server_spec: str = ..., server_name: Annotated[str | None, typer.Option("--name", "-n", help="Custom name for the server (defaults to server's name attribute or" " file name)"),] = ..., with_editable: Annotated[Path | None, typer.Option("--with-editable", "-e", help="Directory containing pyproject.toml to install in editable mode", exists=True, file_okay=False, resolve_path=True),] = ..., with_packages: Annotated[list[str], typer.Option("--with", help="Additional packages to install"),] = ..., env_vars: Annotated[list[str], typer.Option("--env-var", "-v", help="Environment variables in KEY=VALUE format"),] = ..., env_file: Annotated[Path | None, typer.Option("--env-file", "-f", help="Load environment variables from a .env file", exists=True, file_okay=True, dir_okay=False, resolve_path=True),] = ...) -> None:
    """Install a MCP server in the Claude desktop app.

    Environment variables are preserved once added and only updated if new values
    are explicitly provided.
    """
    ...

@app.command()
def inspect(server_spec: str = ..., output: Annotated[Path, typer.Option("--output", "-o", help="Output file path for the JSON report (default: server-info.json)"),] = ...) -> None:
    """Inspect a FastMCP server and generate a JSON report.

    This command analyzes a FastMCP server (v1.x or v2.x) and generates
    a comprehensive JSON report containing information about the server's
    name, instructions, version, tools, prompts, resources, templates,
    and capabilities.

    Examples:
        fastmcp inspect server.py
        fastmcp inspect server.py -o report.json
        fastmcp inspect server.py:mcp -o analysis.json
        fastmcp inspect path/to/server.py:app -o /tmp/server-info.json
    """
    ...

