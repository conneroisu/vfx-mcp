"""
This type stub file was generated by pyright.
"""

import mcp.types
from typing import Any, TYPE_CHECKING
from mcp.types import GetPromptResult
from pydantic.networks import AnyUrl
from fastmcp.client import Client
from fastmcp.prompts import Prompt, PromptMessage
from fastmcp.prompts.prompt_manager import PromptManager
from fastmcp.resources import Resource, ResourceTemplate
from fastmcp.resources.resource_manager import ResourceManager
from fastmcp.server.context import Context
from fastmcp.server.server import FastMCP
from fastmcp.tools.tool import Tool
from fastmcp.tools.tool_manager import ToolManager
from fastmcp.utilities.types import MCPContent
from fastmcp.server import Context

if TYPE_CHECKING:
    ...
logger = ...
class ProxyToolManager(ToolManager):
    """A ToolManager that sources its tools from a remote client in addition to local and mounted tools."""
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    async def get_tools(self) -> dict[str, Tool]:
        """Gets the unfiltered tool inventory including local, mounted, and proxy tools."""
        ...
    
    async def list_tools(self) -> list[Tool]:
        """Gets the filtered list of tools including local, mounted, and proxy tools."""
        ...
    
    async def call_tool(self, key: str, arguments: dict[str, Any]) -> list[MCPContent]:
        """Calls a tool, trying local/mounted first, then proxy if not found."""
        ...
    


class ProxyResourceManager(ResourceManager):
    """A ResourceManager that sources its resources from a remote client in addition to local and mounted resources."""
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    async def get_resources(self) -> dict[str, Resource]:
        """Gets the unfiltered resource inventory including local, mounted, and proxy resources."""
        ...
    
    async def get_resource_templates(self) -> dict[str, ResourceTemplate]:
        """Gets the unfiltered template inventory including local, mounted, and proxy templates."""
        ...
    
    async def list_resources(self) -> list[Resource]:
        """Gets the filtered list of resources including local, mounted, and proxy resources."""
        ...
    
    async def list_resource_templates(self) -> list[ResourceTemplate]:
        """Gets the filtered list of templates including local, mounted, and proxy templates."""
        ...
    
    async def read_resource(self, uri: AnyUrl | str) -> str | bytes:
        """Reads a resource, trying local/mounted first, then proxy if not found."""
        ...
    


class ProxyPromptManager(PromptManager):
    """A PromptManager that sources its prompts from a remote client in addition to local and mounted prompts."""
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    async def get_prompts(self) -> dict[str, Prompt]:
        """Gets the unfiltered prompt inventory including local, mounted, and proxy prompts."""
        ...
    
    async def list_prompts(self) -> list[Prompt]:
        """Gets the filtered list of prompts including local, mounted, and proxy prompts."""
        ...
    
    async def render_prompt(self, name: str, arguments: dict[str, Any] | None = ...) -> GetPromptResult:
        """Renders a prompt, trying local/mounted first, then proxy if not found."""
        ...
    


class ProxyTool(Tool):
    """
    A Tool that represents and executes a tool on a remote server.
    """
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_tool(cls, client: Client, mcp_tool: mcp.types.Tool) -> ProxyTool:
        """Factory method to create a ProxyTool from a raw MCP tool schema."""
        ...
    
    async def run(self, arguments: dict[str, Any], context: Context | None = ...) -> list[MCPContent]:
        """Executes the tool by making a call through the client."""
        ...
    


class ProxyResource(Resource):
    """
    A Resource that represents and reads a resource from a remote server.
    """
    _client: Client
    _value: str | bytes | None = ...
    def __init__(self, client: Client, *, _value: str | bytes | None = ..., **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_resource(cls, client: Client, mcp_resource: mcp.types.Resource) -> ProxyResource:
        """Factory method to create a ProxyResource from a raw MCP resource schema."""
        ...
    
    async def read(self) -> str | bytes:
        """Read the resource content from the remote server."""
        ...
    


class ProxyTemplate(ResourceTemplate):
    """
    A ResourceTemplate that represents and creates resources from a remote server template.
    """
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_template(cls, client: Client, mcp_template: mcp.types.ResourceTemplate) -> ProxyTemplate:
        """Factory method to create a ProxyTemplate from a raw MCP template schema."""
        ...
    
    async def create_resource(self, uri: str, params: dict[str, Any], context: Context | None = ...) -> ProxyResource:
        """Create a resource from the template by calling the remote server."""
        ...
    


class ProxyPrompt(Prompt):
    """
    A Prompt that represents and renders a prompt from a remote server.
    """
    _client: Client
    def __init__(self, client: Client, **kwargs) -> None:
        ...
    
    @classmethod
    def from_mcp_prompt(cls, client: Client, mcp_prompt: mcp.types.Prompt) -> ProxyPrompt:
        """Factory method to create a ProxyPrompt from a raw MCP prompt schema."""
        ...
    
    async def render(self, arguments: dict[str, Any]) -> list[PromptMessage]:
        """Render the prompt by making a call through the client."""
        ...
    


class FastMCPProxy(FastMCP):
    """
    A FastMCP server that acts as a proxy to a remote MCP-compliant server.
    It uses specialized managers that fulfill requests via an HTTP client.
    """
    def __init__(self, client: Client, **kwargs) -> None:
        """
        Initializes the proxy server.

        Args:
            client: The FastMCP client connected to the backend server.
            **kwargs: Additional settings for the FastMCP server.
        """
        ...
    


