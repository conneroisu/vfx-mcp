"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from dataclasses import dataclass
from typing import Any, TYPE_CHECKING
from mcp.types import Tool as MCPTool, ToolAnnotations
from fastmcp.utilities.components import FastMCPComponent
from fastmcp.utilities.types import MCPContent
from fastmcp.tools.tool_transform import ArgTransform, TransformedTool

if TYPE_CHECKING:
    ...
logger = ...
def default_serializer(data: Any) -> str:
    ...

class Tool(FastMCPComponent):
    """Internal tool registration info."""
    parameters: dict[str, Any] = ...
    annotations: ToolAnnotations | None = ...
    serializer: Callable[[Any], str] | None = ...
    def to_mcp_tool(self, **overrides: Any) -> MCPTool:
        ...
    
    @staticmethod
    def from_function(fn: Callable[..., Any], name: str | None = ..., description: str | None = ..., tags: set[str] | None = ..., annotations: ToolAnnotations | None = ..., exclude_args: list[str] | None = ..., serializer: Callable[[Any], str] | None = ..., enabled: bool | None = ...) -> FunctionTool:
        """Create a Tool from a function."""
        ...
    
    async def run(self, arguments: dict[str, Any]) -> list[MCPContent]:
        """Run the tool with arguments."""
        ...
    
    @classmethod
    def from_tool(cls, tool: Tool, transform_fn: Callable[..., Any] | None = ..., name: str | None = ..., transform_args: dict[str, ArgTransform] | None = ..., description: str | None = ..., tags: set[str] | None = ..., annotations: ToolAnnotations | None = ..., serializer: Callable[[Any], str] | None = ..., enabled: bool | None = ...) -> TransformedTool:
        ...
    


class FunctionTool(Tool):
    fn: Callable[..., Any]
    @classmethod
    def from_function(cls, fn: Callable[..., Any], name: str | None = ..., description: str | None = ..., tags: set[str] | None = ..., annotations: ToolAnnotations | None = ..., exclude_args: list[str] | None = ..., serializer: Callable[[Any], str] | None = ..., enabled: bool | None = ...) -> FunctionTool:
        """Create a Tool from a function."""
        ...
    
    async def run(self, arguments: dict[str, Any]) -> list[MCPContent]:
        """Run the tool with arguments."""
        ...
    


@dataclass
class ParsedFunction:
    fn: Callable[..., Any]
    name: str
    description: str | None
    parameters: dict[str, Any]
    @classmethod
    def from_function(cls, fn: Callable[..., Any], exclude_args: list[str] | None = ..., validate: bool = ...) -> ParsedFunction:
        ...
    


